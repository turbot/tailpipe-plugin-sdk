// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: plugin.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddObserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddObserverRequest) Reset() {
	*x = AddObserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddObserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddObserverRequest) ProtoMessage() {}

func (x *AddObserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddObserverRequest.ProtoReflect.Descriptor instead.
func (*AddObserverRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0}
}

type PluginEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*PluginEvent_RowEvent
	//	*PluginEvent_CompleteEvent
	Event isPluginEvent_Event `protobuf_oneof:"event"`
}

func (x *PluginEvent) Reset() {
	*x = PluginEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginEvent) ProtoMessage() {}

func (x *PluginEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginEvent.ProtoReflect.Descriptor instead.
func (*PluginEvent) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{1}
}

func (m *PluginEvent) GetEvent() isPluginEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *PluginEvent) GetRowEvent() *EventRow {
	if x, ok := x.GetEvent().(*PluginEvent_RowEvent); ok {
		return x.RowEvent
	}
	return nil
}

func (x *PluginEvent) GetCompleteEvent() *EventComplete {
	if x, ok := x.GetEvent().(*PluginEvent_CompleteEvent); ok {
		return x.CompleteEvent
	}
	return nil
}

type isPluginEvent_Event interface {
	isPluginEvent_Event()
}

type PluginEvent_RowEvent struct {
	RowEvent *EventRow `protobuf:"bytes,1,opt,name=row_event,json=rowEvent,proto3,oneof"`
}

type PluginEvent_CompleteEvent struct {
	CompleteEvent *EventComplete `protobuf:"bytes,2,opt,name=complete_event,json=completeEvent,proto3,oneof"`
}

func (*PluginEvent_RowEvent) isPluginEvent_Event() {}

func (*PluginEvent_CompleteEvent) isPluginEvent_Event() {}

type CollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowCount int32 `protobuf:"varint,1,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
}

func (x *CollectRequest) Reset() {
	*x = CollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRequest) ProtoMessage() {}

func (x *CollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRequest.ProtoReflect.Descriptor instead.
func (*CollectRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *CollectRequest) GetRowCount() int32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

type EventRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row *Row `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *EventRow) Reset() {
	*x = EventRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRow) ProtoMessage() {}

func (x *EventRow) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRow.ProtoReflect.Descriptor instead.
func (*EventRow) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *EventRow) GetRow() *Row {
	if x != nil {
		return x.Row
	}
	return nil
}

type EventComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventComplete) Reset() {
	*x = EventComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventComplete) ProtoMessage() {}

func (x *EventComplete) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventComplete.ProtoReflect.Descriptor instead.
func (*EventComplete) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{4}
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection  string            `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	Year        int32             `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	Month       int32             `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
	Day         int32             `protobuf:"varint,4,opt,name=day,proto3" json:"day,omitempty"`
	TpID        string            `protobuf:"bytes,5,opt,name=tpID,proto3" json:"tpID,omitempty"`
	TpTimestamp int64             `protobuf:"varint,6,opt,name=tpTimestamp,proto3" json:"tpTimestamp,omitempty"`
	Columns     map[string]*Value `protobuf:"bytes,7,rep,name=columns,proto3" json:"columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // For additional, dynamic data
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *Row) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *Row) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Row) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Row) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *Row) GetTpID() string {
	if x != nil {
		return x.TpID
	}
	return ""
}

func (x *Row) GetTpTimestamp() int64 {
	if x != nil {
		return x.TpTimestamp
	}
	return 0
}

func (x *Row) GetColumns() map[string]*Value {
	if x != nil {
		return x.Columns
	}
	return nil
}

// for supported types see https://github.com/xitongsys/parquet-go?tab=readme-ov-file#example-of-type-and-encoding
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_BoolValue
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_BytearrayValue
	//	*Value_FixedLenBytearrayValue
	//	*Value_StringValue
	//	*Value_Int8Value
	//	*Value_Int16Value
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_Int96Value
	//	*Value_Uint8Value
	//	*Value_Uint16Value
	//	*Value_Uint32Value
	//	*Value_Uint64Value
	//	*Value_DateValue
	//	*Value_Date2Value
	//	*Value_TimemillisValue
	//	*Value_Timemillis2Value
	//	*Value_TimemicrosValue
	//	*Value_Timemicros2Value
	//	*Value_TimestampmillisValue
	//	*Value_Timestampmillis2Value
	//	*Value_TimestampmicrosValue
	//	*Value_Timestampmicros2Value
	//	*Value_IntervalValue
	//	*Value_Decimal1Value
	//	*Value_Decimal2Value
	//	*Value_Decimal3Value
	//	*Value_Decimal4Value
	//	*Value_Decimal5Value
	//	*Value_MapValue
	//	*Value_RepeatedValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{6}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetBoolValue() bool {
	if x, ok := x.GetValue().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Value) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Value) GetBytearrayValue() []byte {
	if x, ok := x.GetValue().(*Value_BytearrayValue); ok {
		return x.BytearrayValue
	}
	return nil
}

func (x *Value) GetFixedLenBytearrayValue() []byte {
	if x, ok := x.GetValue().(*Value_FixedLenBytearrayValue); ok {
		return x.FixedLenBytearrayValue
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetInt8Value() int32 {
	if x, ok := x.GetValue().(*Value_Int8Value); ok {
		return x.Int8Value
	}
	return 0
}

func (x *Value) GetInt16Value() int32 {
	if x, ok := x.GetValue().(*Value_Int16Value); ok {
		return x.Int16Value
	}
	return 0
}

func (x *Value) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *Value) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Value) GetInt96Value() string {
	if x, ok := x.GetValue().(*Value_Int96Value); ok {
		return x.Int96Value
	}
	return ""
}

func (x *Value) GetUint8Value() int32 {
	if x, ok := x.GetValue().(*Value_Uint8Value); ok {
		return x.Uint8Value
	}
	return 0
}

func (x *Value) GetUint16Value() int32 {
	if x, ok := x.GetValue().(*Value_Uint16Value); ok {
		return x.Uint16Value
	}
	return 0
}

func (x *Value) GetUint32Value() int32 {
	if x, ok := x.GetValue().(*Value_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *Value) GetUint64Value() int64 {
	if x, ok := x.GetValue().(*Value_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *Value) GetDateValue() int32 {
	if x, ok := x.GetValue().(*Value_DateValue); ok {
		return x.DateValue
	}
	return 0
}

func (x *Value) GetDate2Value() int32 {
	if x, ok := x.GetValue().(*Value_Date2Value); ok {
		return x.Date2Value
	}
	return 0
}

func (x *Value) GetTimemillisValue() int32 {
	if x, ok := x.GetValue().(*Value_TimemillisValue); ok {
		return x.TimemillisValue
	}
	return 0
}

func (x *Value) GetTimemillis2Value() int32 {
	if x, ok := x.GetValue().(*Value_Timemillis2Value); ok {
		return x.Timemillis2Value
	}
	return 0
}

func (x *Value) GetTimemicrosValue() int64 {
	if x, ok := x.GetValue().(*Value_TimemicrosValue); ok {
		return x.TimemicrosValue
	}
	return 0
}

func (x *Value) GetTimemicros2Value() int64 {
	if x, ok := x.GetValue().(*Value_Timemicros2Value); ok {
		return x.Timemicros2Value
	}
	return 0
}

func (x *Value) GetTimestampmillisValue() int64 {
	if x, ok := x.GetValue().(*Value_TimestampmillisValue); ok {
		return x.TimestampmillisValue
	}
	return 0
}

func (x *Value) GetTimestampmillis2Value() int64 {
	if x, ok := x.GetValue().(*Value_Timestampmillis2Value); ok {
		return x.Timestampmillis2Value
	}
	return 0
}

func (x *Value) GetTimestampmicrosValue() int64 {
	if x, ok := x.GetValue().(*Value_TimestampmicrosValue); ok {
		return x.TimestampmicrosValue
	}
	return 0
}

func (x *Value) GetTimestampmicros2Value() int64 {
	if x, ok := x.GetValue().(*Value_Timestampmicros2Value); ok {
		return x.Timestampmicros2Value
	}
	return 0
}

func (x *Value) GetIntervalValue() []byte {
	if x, ok := x.GetValue().(*Value_IntervalValue); ok {
		return x.IntervalValue
	}
	return nil
}

func (x *Value) GetDecimal1Value() int32 {
	if x, ok := x.GetValue().(*Value_Decimal1Value); ok {
		return x.Decimal1Value
	}
	return 0
}

func (x *Value) GetDecimal2Value() int64 {
	if x, ok := x.GetValue().(*Value_Decimal2Value); ok {
		return x.Decimal2Value
	}
	return 0
}

func (x *Value) GetDecimal3Value() []byte {
	if x, ok := x.GetValue().(*Value_Decimal3Value); ok {
		return x.Decimal3Value
	}
	return nil
}

func (x *Value) GetDecimal4Value() []byte {
	if x, ok := x.GetValue().(*Value_Decimal4Value); ok {
		return x.Decimal4Value
	}
	return nil
}

func (x *Value) GetDecimal5Value() int32 {
	if x, ok := x.GetValue().(*Value_Decimal5Value); ok {
		return x.Decimal5Value
	}
	return 0
}

func (x *Value) GetMapValue() *MapValue {
	if x, ok := x.GetValue().(*Value_MapValue); ok {
		return x.MapValue
	}
	return nil
}

func (x *Value) GetRepeatedValue() *RepeatedValue {
	if x, ok := x.GetValue().(*Value_RepeatedValue); ok {
		return x.RepeatedValue
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_BoolValue struct {
	// Bool
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Value_FloatValue struct {
	// Float
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Value_DoubleValue struct {
	// Double
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Value_BytearrayValue struct {
	// ByteArray
	BytearrayValue []byte `protobuf:"bytes,4,opt,name=bytearray_value,json=bytearrayValue,proto3,oneof"`
}

type Value_FixedLenBytearrayValue struct {
	// FixedLenByteArray
	FixedLenBytearrayValue []byte `protobuf:"bytes,5,opt,name=fixed_len_bytearray_value,json=fixedLenBytearrayValue,proto3,oneof"`
}

type Value_StringValue struct {
	// Utf8
	StringValue string `protobuf:"bytes,6,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_Int8Value struct {
	// Int8
	Int8Value int32 `protobuf:"varint,7,opt,name=int8_value,json=int8Value,proto3,oneof"`
}

type Value_Int16Value struct {
	// Int16
	Int16Value int32 `protobuf:"varint,8,opt,name=int16_value,json=int16Value,proto3,oneof"`
}

type Value_Int32Value struct {
	// Int32
	Int32Value int32 `protobuf:"varint,9,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Value_Int64Value struct {
	// Int64
	Int64Value int64 `protobuf:"varint,10,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Value_Int96Value struct {
	// Int96 represented as string
	Int96Value string `protobuf:"bytes,11,opt,name=int96_value,json=int96Value,proto3,oneof"`
}

type Value_Uint8Value struct {
	// Uint8
	Uint8Value int32 `protobuf:"varint,12,opt,name=uint8_value,json=uint8Value,proto3,oneof"`
}

type Value_Uint16Value struct {
	// Uint16
	Uint16Value int32 `protobuf:"varint,13,opt,name=uint16_value,json=uint16Value,proto3,oneof"`
}

type Value_Uint32Value struct {
	// Uint32
	Uint32Value int32 `protobuf:"varint,14,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type Value_Uint64Value struct {
	// Uint64
	Uint64Value int64 `protobuf:"varint,15,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Value_DateValue struct {
	// Date
	DateValue int32 `protobuf:"varint,16,opt,name=date_value,json=dateValue,proto3,oneof"`
}

type Value_Date2Value struct {
	// Date2
	Date2Value int32 `protobuf:"varint,17,opt,name=date2_value,json=date2Value,proto3,oneof"`
}

type Value_TimemillisValue struct {
	// TimeMillis
	TimemillisValue int32 `protobuf:"varint,18,opt,name=timemillis_value,json=timemillisValue,proto3,oneof"`
}

type Value_Timemillis2Value struct {
	// TimeMillis2
	Timemillis2Value int32 `protobuf:"varint,19,opt,name=timemillis2_value,json=timemillis2Value,proto3,oneof"`
}

type Value_TimemicrosValue struct {
	// TimeMicros
	TimemicrosValue int64 `protobuf:"varint,20,opt,name=timemicros_value,json=timemicrosValue,proto3,oneof"`
}

type Value_Timemicros2Value struct {
	// TimeMicros2
	Timemicros2Value int64 `protobuf:"varint,21,opt,name=timemicros2_value,json=timemicros2Value,proto3,oneof"`
}

type Value_TimestampmillisValue struct {
	// TimestampMillis
	TimestampmillisValue int64 `protobuf:"varint,22,opt,name=timestampmillis_value,json=timestampmillisValue,proto3,oneof"`
}

type Value_Timestampmillis2Value struct {
	// TimestampMillis2
	Timestampmillis2Value int64 `protobuf:"varint,23,opt,name=timestampmillis2_value,json=timestampmillis2Value,proto3,oneof"`
}

type Value_TimestampmicrosValue struct {
	// TimestampMicros
	TimestampmicrosValue int64 `protobuf:"varint,24,opt,name=timestampmicros_value,json=timestampmicrosValue,proto3,oneof"`
}

type Value_Timestampmicros2Value struct {
	// TimestampMicros2
	Timestampmicros2Value int64 `protobuf:"varint,25,opt,name=timestampmicros2_value,json=timestampmicros2Value,proto3,oneof"`
}

type Value_IntervalValue struct {
	// Interval
	IntervalValue []byte `protobuf:"bytes,26,opt,name=interval_value,json=intervalValue,proto3,oneof"`
}

type Value_Decimal1Value struct {
	// Decimal1
	Decimal1Value int32 `protobuf:"varint,27,opt,name=decimal1_value,json=decimal1Value,proto3,oneof"`
}

type Value_Decimal2Value struct {
	// Decimal2
	Decimal2Value int64 `protobuf:"varint,28,opt,name=decimal2_value,json=decimal2Value,proto3,oneof"`
}

type Value_Decimal3Value struct {
	// Decimal3
	Decimal3Value []byte `protobuf:"bytes,29,opt,name=decimal3_value,json=decimal3Value,proto3,oneof"`
}

type Value_Decimal4Value struct {
	// Decimal4
	Decimal4Value []byte `protobuf:"bytes,30,opt,name=decimal4_value,json=decimal4Value,proto3,oneof"`
}

type Value_Decimal5Value struct {
	// Decimal5
	Decimal5Value int32 `protobuf:"varint,31,opt,name=decimal5_value,json=decimal5Value,proto3,oneof"`
}

type Value_MapValue struct {
	// Map
	MapValue *MapValue `protobuf:"bytes,32,opt,name=map_value,json=mapValue,proto3,oneof"`
}

type Value_RepeatedValue struct {
	// Repeated
	RepeatedValue *RepeatedValue `protobuf:"bytes,33,opt,name=repeated_value,json=repeatedValue,proto3,oneof"`
}

func (*Value_BoolValue) isValue_Value() {}

func (*Value_FloatValue) isValue_Value() {}

func (*Value_DoubleValue) isValue_Value() {}

func (*Value_BytearrayValue) isValue_Value() {}

func (*Value_FixedLenBytearrayValue) isValue_Value() {}

func (*Value_StringValue) isValue_Value() {}

func (*Value_Int8Value) isValue_Value() {}

func (*Value_Int16Value) isValue_Value() {}

func (*Value_Int32Value) isValue_Value() {}

func (*Value_Int64Value) isValue_Value() {}

func (*Value_Int96Value) isValue_Value() {}

func (*Value_Uint8Value) isValue_Value() {}

func (*Value_Uint16Value) isValue_Value() {}

func (*Value_Uint32Value) isValue_Value() {}

func (*Value_Uint64Value) isValue_Value() {}

func (*Value_DateValue) isValue_Value() {}

func (*Value_Date2Value) isValue_Value() {}

func (*Value_TimemillisValue) isValue_Value() {}

func (*Value_Timemillis2Value) isValue_Value() {}

func (*Value_TimemicrosValue) isValue_Value() {}

func (*Value_Timemicros2Value) isValue_Value() {}

func (*Value_TimestampmillisValue) isValue_Value() {}

func (*Value_Timestampmillis2Value) isValue_Value() {}

func (*Value_TimestampmicrosValue) isValue_Value() {}

func (*Value_Timestampmicros2Value) isValue_Value() {}

func (*Value_IntervalValue) isValue_Value() {}

func (*Value_Decimal1Value) isValue_Value() {}

func (*Value_Decimal2Value) isValue_Value() {}

func (*Value_Decimal3Value) isValue_Value() {}

func (*Value_Decimal4Value) isValue_Value() {}

func (*Value_Decimal5Value) isValue_Value() {}

func (*Value_MapValue) isValue_Value() {}

func (*Value_RepeatedValue) isValue_Value() {}

type MapValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries map[string]*Value `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapValue) Reset() {
	*x = MapValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValue) ProtoMessage() {}

func (x *MapValue) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValue.ProtoReflect.Descriptor instead.
func (*MapValue) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *MapValue) GetEntries() map[string]*Value {
	if x != nil {
		return x.Entries
	}
	return nil
}

type RepeatedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RepeatedValue) Reset() {
	*x = RepeatedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedValue) ProtoMessage() {}

func (x *RepeatedValue) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedValue.ProtoReflect.Descriptor instead.
func (*RepeatedValue) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *RepeatedValue) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{9}
}

type GetSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{10}
}

type GetSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of schemas keyed by collection name
	Schemas map[string]string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *GetSchemaResponse) GetSchemas() map[string]string {
	if x != nil {
		return x.Schemas
	}
	return nil
}

var File_plugin_proto protoreflect.FileDescriptor

var file_plugin_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x0b,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x72,
	0x6f, 0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x28, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x1c,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x0f, 0x0a, 0x0d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x94, 0x02,
	0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x48, 0x0a, 0x0c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x0b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3b, 0x0a, 0x19, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x16, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x65,
	0x6e, 0x42, 0x79, 0x74, 0x65, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x38,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x39, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x39, 0x36, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2d, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x35, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x35, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x27, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x33, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x33, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x35, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x35,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x08, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x48, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x12, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x90, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x32, 0xc0, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x69, 0x6c, 0x70, 0x69, 0x70, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_proto_rawDescOnce sync.Once
	file_plugin_proto_rawDescData = file_plugin_proto_rawDesc
)

func file_plugin_proto_rawDescGZIP() []byte {
	file_plugin_proto_rawDescOnce.Do(func() {
		file_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_proto_rawDescData)
	})
	return file_plugin_proto_rawDescData
}

var file_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_plugin_proto_goTypes = []interface{}{
	(*AddObserverRequest)(nil), // 0: proto.AddObserverRequest
	(*PluginEvent)(nil),        // 1: proto.PluginEvent
	(*CollectRequest)(nil),     // 2: proto.CollectRequest
	(*EventRow)(nil),           // 3: proto.EventRow
	(*EventComplete)(nil),      // 4: proto.EventComplete
	(*Row)(nil),                // 5: proto.Row
	(*Value)(nil),              // 6: proto.Value
	(*MapValue)(nil),           // 7: proto.MapValue
	(*RepeatedValue)(nil),      // 8: proto.RepeatedValue
	(*Empty)(nil),              // 9: proto.Empty
	(*GetSchemaRequest)(nil),   // 10: proto.GetSchemaRequest
	(*GetSchemaResponse)(nil),  // 11: proto.GetSchemaResponse
	nil,                        // 12: proto.Row.ColumnsEntry
	nil,                        // 13: proto.MapValue.EntriesEntry
	nil,                        // 14: proto.GetSchemaResponse.SchemasEntry
}
var file_plugin_proto_depIdxs = []int32{
	3,  // 0: proto.PluginEvent.row_event:type_name -> proto.EventRow
	4,  // 1: proto.PluginEvent.complete_event:type_name -> proto.EventComplete
	5,  // 2: proto.EventRow.row:type_name -> proto.Row
	12, // 3: proto.Row.columns:type_name -> proto.Row.ColumnsEntry
	7,  // 4: proto.Value.map_value:type_name -> proto.MapValue
	8,  // 5: proto.Value.repeated_value:type_name -> proto.RepeatedValue
	13, // 6: proto.MapValue.entries:type_name -> proto.MapValue.EntriesEntry
	6,  // 7: proto.RepeatedValue.values:type_name -> proto.Value
	14, // 8: proto.GetSchemaResponse.schemas:type_name -> proto.GetSchemaResponse.SchemasEntry
	6,  // 9: proto.Row.ColumnsEntry.value:type_name -> proto.Value
	6,  // 10: proto.MapValue.EntriesEntry.value:type_name -> proto.Value
	10, // 11: proto.TailpipePlugin.GetSchema:input_type -> proto.GetSchemaRequest
	0,  // 12: proto.TailpipePlugin.AddObserver:input_type -> proto.AddObserverRequest
	2,  // 13: proto.TailpipePlugin.Collect:input_type -> proto.CollectRequest
	11, // 14: proto.TailpipePlugin.GetSchema:output_type -> proto.GetSchemaResponse
	1,  // 15: proto.TailpipePlugin.AddObserver:output_type -> proto.PluginEvent
	9,  // 16: proto.TailpipePlugin.Collect:output_type -> proto.Empty
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_plugin_proto_init() }
func file_plugin_proto_init() {
	if File_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddObserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugin_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PluginEvent_RowEvent)(nil),
		(*PluginEvent_CompleteEvent)(nil),
	}
	file_plugin_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Value_BoolValue)(nil),
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_BytearrayValue)(nil),
		(*Value_FixedLenBytearrayValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_Int8Value)(nil),
		(*Value_Int16Value)(nil),
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_Int96Value)(nil),
		(*Value_Uint8Value)(nil),
		(*Value_Uint16Value)(nil),
		(*Value_Uint32Value)(nil),
		(*Value_Uint64Value)(nil),
		(*Value_DateValue)(nil),
		(*Value_Date2Value)(nil),
		(*Value_TimemillisValue)(nil),
		(*Value_Timemillis2Value)(nil),
		(*Value_TimemicrosValue)(nil),
		(*Value_Timemicros2Value)(nil),
		(*Value_TimestampmillisValue)(nil),
		(*Value_Timestampmillis2Value)(nil),
		(*Value_TimestampmicrosValue)(nil),
		(*Value_Timestampmicros2Value)(nil),
		(*Value_IntervalValue)(nil),
		(*Value_Decimal1Value)(nil),
		(*Value_Decimal2Value)(nil),
		(*Value_Decimal3Value)(nil),
		(*Value_Decimal4Value)(nil),
		(*Value_Decimal5Value)(nil),
		(*Value_MapValue)(nil),
		(*Value_RepeatedValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_proto_goTypes,
		DependencyIndexes: file_plugin_proto_depIdxs,
		MessageInfos:      file_plugin_proto_msgTypes,
	}.Build()
	File_plugin_proto = out.File
	file_plugin_proto_rawDesc = nil
	file_plugin_proto_goTypes = nil
	file_plugin_proto_depIdxs = nil
}
