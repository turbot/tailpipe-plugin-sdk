syntax = "proto3";
package proto;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


option go_package = ".;proto";

service TailpipePlugin {
  rpc Describe(DescribeRequest) returns (DescribeResponse);
  rpc AddObserver(Empty) returns (stream Event);
  rpc Collect(CollectRequest) returns (CollectResponse);
  rpc InitSource(InitSourceRequest) returns (Empty) ;
  rpc CloseSource(Empty) returns (Empty);
  rpc SaveCollectionState(Empty) returns (Empty);
  rpc SourceCollect(SourceCollectRequest) returns (Empty);
  rpc GetSourceTiming(Empty) returns (GetSourceTimingResponse);
}

message Empty{}


message CollectRequest {
  string table_name = 1;
  string partition_name = 2;
  // unique identifier for collection execution this will be used as base for the filename for the resulting JSONL files
  string execution_id = 3;
  //  the root collection file path - used to build the jsonl path and temp path
  string collection_temp_dir= 4;
  string collection_state_dir = 5;
  // the source to use (with raw config)
  ConfigData source_data = 6;
  // the raw hcl of the connection
  ConfigData connection_data = 7;
  // if this is custom table, Table contains the source format and table schema
  Table custom_table = 8;
  // the source format
  ConfigData source_format = 9;
  // optional: the reattach config to connect to the plugin providing the source
  SourcePluginReattach source_plugin = 10;
  // the collection start time
  google.protobuf.Timestamp from_time = 11;
}

message Table {
  string name = 1;
  // the schema of the table
  Schema schema = 2;
}

message DescribeRequest {
}

message DescribeResponse {
  // Map of schemas keyed by collection name
  map<string, Schema> schemas = 1;
  map<string, SourceMetadata> sources = 2;

}

message CollectResponse {
  string execution_id = 1;

  // partition schema
  Schema schema = 2;
}

// schema
message Schema {
  // Map of source field name to column name and type
  repeated ColumnSchema columns = 1;
  // should we include ALL source fields in addition to any defined columns, or ONLY include the columns defined
  bool automap_source_fields = 2;
  // should we exclude any source fields from the output (only applicable if automap_source_fields is true)
  repeated string exclude_source_fields = 3;
}

message ColumnSchema {
  // The type of the column - must be a valid DuckDB type
  string type = 1;
  // The name of the source field
  string source_name = 2;
  // The name of the column
  string column_name = 3;
  // child fields (for a struct)
  repeated ColumnSchema child_fields = 4;
}

message ConfigData {
  // the name of the config target
  string target = 1;
  // raw hcl for collection specific config
  bytes hcl = 2;
  Range range = 3;
}

message Range{
  string filename = 1;
  Pos start = 2;
  Pos end = 3;
}

message Pos{
  int64 line = 1;
  int64 column = 2;
  int64 byte = 3;
}


// events

// Define the Event message with oneof and enum
message Event {
  oneof event {
    EventStarted started_event = 1;
    EventChunkWritten chunk_written_event = 2;
    EventComplete complete_event = 3;
    EventError error_event = 4;
    EventStatus status_event = 5;
    EventArtifactDiscovered artifact_discovered_event = 6;
    EventArtifactDownloaded artifact_downloaded_event = 7;
    EventArtifactExtracted artifact_extracted_event = 8;
    EventSourceComplete source_complete_event = 9;
  }
}

message EventStarted {
  string execution_id = 1;
}

message EventChunkWritten {
  string execution_id = 1;
  int32 chunk_number = 2;
}

message EventError {
  string execution_id = 1;
  string error = 2;
}

message EventStatus {
  int64 artifacts_discovered = 1;
  int64 artifacts_downloaded = 2;
  int64 artifacts_extracted = 3;
  int64 rows_enriched = 4;
  int32 errors = 5;
}

message EventComplete {
  string execution_id = 1;
  int64 row_count=2;
  int32 chunk_count=3;
  map<string, string> metadata = 4;
  repeated Timing timing = 5;
  string error = 6;
}


message EventSourceComplete {
  string execution_id = 1;
  repeated Timing timing = 5;
  string error = 6;
}

message EventArtifactDiscovered{
  string execution_id = 1;
  ArtifactInfo artifact_info = 2;
}

message EventArtifactDownloaded{
  string execution_id = 1;
  ArtifactInfo artifact_info = 2;
  bytes collection_state = 3;
}

message EventArtifactExtracted{
  string execution_id = 1;
  ArtifactInfo artifact_info = 2;
}

// ArtifactInfo is a message representing artifact metadata.
message ArtifactInfo {
  // The local path of the downloaded artifact.
  string local_name = 1;

  // The original path of the artifact.
  string original_name = 2;

  // Any enrichment fields provided by the source.
  SourceEnrichment source_enrichment = 3;
}

message Timing{
  string operation = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  google.protobuf.Duration active_duration = 4;
}

message SourceEnrichment{
  map<string, string> common_fields = 1;
  map<string, string> metadata = 2;
}

message SourceMetadata{
  string name = 1;
  string description = 2;
}


message SourcePluginReattach {
  ReattachConfig reattach_config = 1;
  string source_type      = 2;
  string plugin           = 3;

}
message ReattachConfig {
  string protocol         = 1;
  int64  protocol_version = 2;
  NetAddr addr            = 3;
  int64 pid               = 4;
}

message NetAddr {
  string Network = 1; // name of the network (for example, "tcp", "udp")
  string Address = 2; // string form of address (for example, "192.0.2.1:25", "[2001:db8::1]:80")
}

// source functions
message InitSourceRequest{
  // the default config for the source
  ArtifactSourceConfig default_config = 1;
  // params to use for the source
  row_source_params source_params = 2;
}

message row_source_params{
  // the source to use (with raw config)
  ConfigData source_data = 1;
  // the raw hcl of the connection
  ConfigData connection_data = 2;
  // the collection start time
  google.protobuf.Timestamp from_time = 3;
  // the collection temporary directory
  string collection_temp_dir = 4;
  // the path to the collection state file
  string collection_state_path = 5;
}

// ArtifactSourceConfigBase is a configuration message for an artifact source.
message ArtifactSourceConfig {
  // File layout grok string defining the file layout and allowing metadata extraction.
  string file_layout = 1;

  // Grok patterns to add to the grok parser used to parse the layout.
  map<string, string> patterns = 2;

  // List of filters to apply to the path segments.
  // Note: each filter must refer to a single property only.
  repeated string filters = 3;


}

message SourceCollectRequest{
  // unique identifier for collection execution
  string execution_id = 1;
}

message GetSourceTimingResponse{
  repeated Timing timing = 1;
};