syntax = "proto3";
package proto;
option go_package = ".;proto";

service TailpipePlugin {
//  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);
  rpc AddObserver(AddObserverRequest) returns (stream Event);
  rpc Collect(CollectRequest) returns (Empty);
 }

message AddObserverRequest{}

message CollectRequest {
  // unique identifier for collection execution this will be used as base for the filename fo the resultiung JSONL files
  string execution_id = 1;
//  dest path for jsonl files
  string output_path= 2;

  // todo add collection config

}

message Empty {}

// events

// Define the Event message with oneof and enum
message Event {
  oneof event {
    EventStarted started_event = 1;
    EventChunkWritten chunk_written_event = 2;
    EventComplete complete_event = 3;
  }
}

message EventStarted {
  string execution_id = 1;
}
message EventChunkWritten {
  string execution_id = 1;
  int32 chunk_number = 2;
}

message EventComplete {
  string execution_id = 1;
  int64 row_count=2;
  int32 chunk_count=3;
  string error = 4;
}