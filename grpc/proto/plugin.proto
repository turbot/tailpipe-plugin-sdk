syntax = "proto3";
package proto;
option go_package = ".;proto";

service TailpipePlugin {
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);
  rpc AddObserver(AddObserverRequest) returns (stream PluginEvent);
  rpc Collect(CollectRequest) returns (Empty);
 }

message AddObserverRequest{}

message PluginEvent{
      oneof event {
          EventRow row_event = 1;
          EventComplete complete_event = 2;
    }
}

message CollectRequest {
    int32 row_count = 1;
}

message EventRow {
    Row row = 1;
}

message EventComplete {
}

message Row {
  string connection = 1;
  int32 year = 2;
  int32 month = 3;
  int32 day = 4;
  string tpID = 5;
  int64 tpTimestamp = 6;
  map<string, Value> columns = 7; // For additional, dynamic data
}

// for supported types see https://github.com/xitongsys/parquet-go?tab=readme-ov-file#example-of-type-and-encoding
message Value {
  oneof value {
    // Bool
    bool bool_value = 1;
    // Float
    float float_value = 2;
    // Double
    double double_value = 3;
    // ByteArray
    bytes bytearray_value = 4;
    // FixedLenByteArray
    bytes fixed_len_bytearray_value = 5;

    // Utf8
    string string_value = 6;
    // Int8
    int32 int8_value = 7;
    // Int16
    int32 int16_value = 8;
    // Int32
    int32 int32_value = 9;
    // Int64
    int64 int64_value = 10;
    // Int96 represented as string
    string int96_value = 11;
    // Uint8
    int32 uint8_value = 12;
    // Uint16
    int32 uint16_value = 13;
    // Uint32
    int32 uint32_value = 14;
    // Uint64
    int64 uint64_value = 15;

    // Date
    int32 date_value = 16;
    // Date2
    int32 date2_value = 17;
    // TimeMillis
    int32 timemillis_value = 18;
    // TimeMillis2
    int32 timemillis2_value = 19;
    // TimeMicros
    int64 timemicros_value = 20;
    // TimeMicros2
    int64 timemicros2_value = 21;
    // TimestampMillis
    int64 timestampmillis_value = 22;
    // TimestampMillis2
    int64 timestampmillis2_value = 23;
    // TimestampMicros
    int64 timestampmicros_value = 24;
    // TimestampMicros2
    int64 timestampmicros2_value = 25;

    // Interval
    bytes interval_value = 26;

    // Decimal1
    int32 decimal1_value = 27;
    // Decimal2
    int64 decimal2_value = 28;
    // Decimal3
    bytes decimal3_value = 29;
    // Decimal4
    bytes decimal4_value = 30;
    // Decimal5
    int32 decimal5_value = 31;

    // Map
    MapValue map_value = 32;
    // Repeated
    RepeatedValue repeated_value = 33;
  }
}

message MapValue {
  map<string, Value> entries = 1;
}

message RepeatedValue {
  repeated Value values = 1;
}

message Empty {}

message GetSchemaRequest {
}

message GetSchemaResponse {
// Map of schemas keyed by collection name
  map<string, string> schemas = 1;
}

// TODO NEEDED?
// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
//  The JSON representation for `NullValue` is JSON `null`.
enum NullValue {
  // Null value.
  NULL_VALUE = 0;
}
